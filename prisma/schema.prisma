
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  password  String?
  title     String?
  avatar    String?
  posts     Post[]
  messages  Message[]
  messageReads MessageRead[]
  reactions Reaction[]
  conversationReadsAsUser ConversationRead[] @relation("conv_user")
  conversationReadsAsOther ConversationRead[] @relation("conv_other")
  receivedMessages Message[] @relation("MessageRecipient")
  comments  Comment[]
  likes     Like[]
  followers Follow[]  @relation("following")
  following Follow[]  @relation("follower")
  createdAt DateTime  @default(now())
}

model Post {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  content   String
  image     String?
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  text      String
  createdAt DateTime @default(now())
}

model Like {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([postId, userId])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Message {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  recipient User?    @relation("MessageRecipient", fields: [recipientId], references: [id])
  recipientId String?
  text      String
  createdAt DateTime @default(now())
  reads     MessageRead[]
  reactions Reaction[]
}

model MessageRead {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}

model Reaction {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  createdAt DateTime @default(now())

  @@unique([messageId, userId, type])
}

// track per-user read cursor for a one-to-one conversation (user <> otherUser)
model ConversationRead {
  id         String   @id @default(cuid())
  user       User     @relation("conv_user", fields: [userId], references: [id])
  userId     String
  otherUser  User     @relation("conv_other", fields: [otherUserId], references: [id])
  otherUserId String
  lastReadAt DateTime @default(now())

  @@unique([userId, otherUserId])
}
